) %>%
select(!c(session,set))
df_files
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 1) %>%
mutate(filename = filename)
return(log)
}
# lots of crap in the log file, suppress warnings once you
# are sure it's doing what you want
poppa <- parse_log(df$filename[1]) %>% suppressWarnings()
# lots of crap in the log file, suppress warnings once you
# are sure it's doing what you want
poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
pf <- df_files[1:5,]
poppa <- pf$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
inner_join(pf,poppa)
df <- inner_join(pf,poppa)
df_files_PART <- df_files[1:5,]
df_files_PART
df_files_PART$filename
df <- df_files_PART$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest() %>%
inner_join(df_files_PART)
df
df <- df_files_PART$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df
df_files_PART
df <- df_files_PART$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest() %>%
inner_join(df_files_PART)
df
df_logs <- df_files_PART$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df_logs
df <- inner_join(df_files_PART, df_logs)
df
df <- inner_join(df_files_PART, df_logs, by="filename")
df
df_files_PART <- df_files[1:5,]
df_logs <- df_files_PART$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files_PART, df_logs, by="filename")
df
df %>% unnest(data)
df %>% unnest()
df %>% unnest(data)
df %>% unnest()
?unnest
df %>% unnest(cols = c(data))
df_files_PART <- df_files[1:5,]
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
# df %>% unnest(cols = c(data))
df <- inner_join(df_files, df_logs, by="filename")
df
df %>% unnest(cols = c(data))
colnames(df)
df <- df %>% unnest(cols = c(data))
colnames(df)
df
df %>%
group_by(name) %>%
group_split()
df %>%
group_by(name) %>%
select(c(filename,name,nTR)) %>%
group_split()
options(dplyr.print_max = 20)
df %>%
group_by(name) %>%
select(c(filename,name,nTR)) %>%
group_split()
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
df <- df %>% unnest(cols = c(data))
options(dplyr.print_max = 20)
df %>%
group_by(name) %>%
select(c(filename,name,nTR)) %>%
group_split()
colnames(df)
df %>%
group_by(name) %>%
select(c(filename,name,nTR,Duration)) %>%
group_split()
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
df <- df %>% unnest(cols = c(data))
df %>%
group_by(name) %>%
select(c(filename,name,nTR,Duration)) %>%
group_split()
colnames(df)
df %>%
group_by(name) %>%
select(c(filename,name,nTR,muvi_start_volume,muvi_end_volume)) %>%
group_split()
df %>%
group_by(name,run) %>%
select(c(filename,name,nTR,muvi_start_volume,muvi_end_volume)) %>%
group_split()
df %>%
group_by(name) %>%
select(c(filename,name,nTR,muvi_start_volume,muvi_end_volume)) %>%
group_split()
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 2) %>%
mutate(filename = filename)
return(log)
}
# # tester
# poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
df <- df %>% unnest(cols = c(data))
colnames(df)
df %>%
group_by(name) %>%
select(c(filename,name,nTR,muvi_start_volume,muvi_end_volume)) %>%
group_split()
# !diagnostics off
library(tidyverse)
bd = "/Users/leonardo/GoogleDrive/LAYER_fMRI/logs/"
TR <- 4.1
df_files <- list.files(paste0(bd,"/clean/")) %>%
as_tibble() %>%
rename(filename = value) %>%
rowwise() %>%
tidyr::separate(
filename, c("sub","session","set","garbage","run"),
sep = "_", fill = "right", remove = F
) %>%
select(!garbage) %>%
mutate(
ses = str_extract(session,"[1-2]"),
task = str_extract(set,"[1-4]"),
run = str_extract(run, "[1-2]")
) %>%
select(!c(session,set))
df_files
# !diagnostics off
library(tidyverse)
bd = "/Users/leonardo/GoogleDrive/LAYER_fMRI/logs/"
TR <- 4.1
df_files <- list.files(paste0(bd,"/clean/")) %>%
as_tibble() %>%
rename(filename = value) %>%
rowwise() %>%
tidyr::separate(
filename, c("sub","session","set","garbage","run"),
sep = "_", fill = "right", remove = F
) %>%
select(!garbage) %>%
mutate(
ses = str_extract(session,"[1-2]"),
task = str_extract(set,"[1-4]"),
run = str_extract(run, "[1-2]")
) %>%
select(!c(session,set))
df_files
rm(list=ls())
# !diagnostics off
library(tidyverse)
bd = "/Users/leonardo/GoogleDrive/LAYER_fMRI/logs/"
TR <- 4.1
df_files <- list.files(paste0(bd,"/clean/")) %>%
as_tibble() %>%
rename(filename = value) %>%
rowwise() %>%
tidyr::separate(
filename, c("sub","session","set","garbage","run"),
sep = "_", fill = "right", remove = F
) %>%
select(!garbage) %>%
mutate(
ses = str_extract(session,"[1-2]"),
task = str_extract(set,"[1-4]"),
run = str_extract(run, "[1-2]")
) %>%
select(!c(session,set))
df_files
# !diagnostics off
library(tidyverse)
bd = "/Users/leonardo/GoogleDrive/LAYER_fMRI/logs/"
TR <- 4.1
df_files <- list.files(paste0(bd,"/clean/")) %>%
as_tibble() %>%
rename(filename = value) %>%
rowwise() %>%
tidyr::separate(
filename, c("sub","session","set","garbage","run"),
sep = "_", fill = "right", remove = F
) %>%
select(!garbage) %>%
mutate(
ses = str_extract(session,"[1-2]"),
task = str_extract(set,"[1-4]"),
run = str_extract(run, "[1-2]")
) %>%
select(!c(session,set))
df_files
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 2) %>%
mutate(filename = filename)
return(log)
}
# # tester
# poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 2) %>%
mutate(filename = filename)
return(log)
}
# # tester
# poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
rm(list=ls())
# !diagnostics off
library(tidyverse)
bd = "/Users/leonardo/GoogleDrive/LAYER_fMRI/logs/"
TR <- 4.1
df_files <- list.files(paste0(bd,"/clean/")) %>%
as_tibble() %>%
rename(filename = value) %>%
rowwise() %>%
tidyr::separate(
filename, c("sub","session","set","garbage","run"),
sep = "_", fill = "right", remove = F
) %>%
select(!garbage) %>%
mutate(
ses = str_extract(session,"[1-2]"),
task = str_extract(set,"[1-4]"),
run = str_extract(run, "[1-2]")
) %>%
select(!c(session,set))
df_files
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 2) %>%
mutate(filename = filename)
return(log)
}
# # tester
# poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
parse_log <- function(filename) {
logfile <- paste0(bd,"/clean/",filename)
sub <- str_split(filename,"_") %>% unlist() %>% .[1]
# read file and skip the first lines
file_content <- readr::read_delim(logfile, skip = 3, delim = "\t")
# get the muviz and their duration in nTR
muviz <- file_content %>% filter(grepl("SBL",Subject))
muviz <- muviz %>%
select(Subject, Duration) %>%
rowwise() %>%
mutate(name = strsplit(Subject, "\\", fixed = T) %>% unlist() %>% tail(n=1)) %>%
mutate(nTR = round(as.numeric(Duration)/10000/TR)) %>%
select(name, Duration, nTR)
# get the log
log <- file_content %>% filter(grepl(sub, Subject))
# remove the "Response" lines
log <- log %>%
rename(event_type = `Event Type`) %>%
filter(event_type != 'Response') %>%
select(event_type, Code, Time) %>%
mutate(pulse_numba = 0)
# create a column contaning the pulse numba
idx_pulse <- log$event_type == "Pulse"
log$pulse_numba[idx_pulse] <- 1:sum(idx_pulse)
# (1) shift the pulse_numba of -1 so that the numba on each video (Action[N])
# corresponds to the starting volume/time point
# (2) omit the na, thereby getting rid of the last row with 'Quit'
# (3) isolate the rows with movies
log <- log %>%
mutate(muvi_start_volume = lead(pulse_numba, n = 1)) %>%
na.omit() %>%
filter(grepl("Action",Code)) %>%
select(Code, muvi_start_volume)
# join log and muviz to get the final values
# NB: I use -2 to calculate the final volume since with -1
#     I have volumes which were out of the acquisition (FU)
log <- cbind(muviz,log) %>%
mutate(muvi_end_volume = muvi_start_volume + nTR - 2) %>%
mutate(filename = filename)
return(log)
}
# # tester
# poppa <- parse_log(df_files$filename[1]) %>% suppressWarnings()
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
df <- df %>% unnest(cols = c(data))
colnames(df)
df
?save_csv
?save.csv
?write.csv
bd
paste0(bd,"/timings.csv")
df <- write.csv(df, paste0(bd,"/timings.csv"))
write.csv(df, paste0(bd,"/timings.csv"))
df
df_logs <- df_files$filename %>%
map_df(~ parse_log(.x) %>% suppressWarnings()) %>%
group_by(filename) %>%
nest()
df <- inner_join(df_files, df_logs, by="filename")
df <- df %>% unnest(cols = c(data))
colnames(df)
df %>%
group_by(name) %>%
select(c(filename,name,nTR,muvi_start_volume,muvi_end_volume)) %>%
group_split()
df
write.csv(df, paste0(bd,"/timings.csv"))
